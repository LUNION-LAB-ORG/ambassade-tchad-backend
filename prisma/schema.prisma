generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres", "relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enum pour les rôles spécifiques au PERSONNEL de l'ambassade/consulat
enum Role {
  AGENT
  CHEF_SERVICE
  CONSUL
  ADMIN
}

// Enum pour le type général d'utilisateur de la plateforme
enum UserType {
  DEMANDEUR // Utilisateur demandeur de services
  PERSONNEL // Utilisateur membre du personnel de l'ambassade/consulat
}

// Enum pour le statut d'activation du compte utilisateur
enum UserStatus {
  ACTIVE
  INACTIVE
  DELETED
}

model User {
  id          String  @id @default(uuid())
  email       String  @unique
  password    String
  firstName   String?
  lastName    String?
  phoneNumber String? @unique

  role                     Role? // Rôle spécifique si l'utilisateur est du type PERSONNEL (peut être null pour les CLIENTS)
  type                     UserType   @default(DEMANDEUR) // Par défaut, un nouvel utilisateur est un DEMANDEUR
  status                   UserStatus @default(ACTIVE)
  isPasswordChangeRequired Boolean    @default(false)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Relation avec les demandes soumises par cet utilisateur (principalement pour les CLIENTS)
  requests Request[]

  // Relations pour les actions effectuées par cet utilisateur (principalement pour le PERSONNEL)
  uploadedDocuments Document[]             @relation("UploaderDocuments") // Documents uploadés par cet utilisateur
  statusChanges     RequestStatusHistory[] @relation("StatusChanger") // Changements de statut effectués par cet utilisateur
  recordedPayments  Payment[]              @relation("PaymentRecorder") // Paiements enregistrés par cet utilisateur

  // Relations pour le CMS (principalement pour le PERSONNEL)
  news                News[]               @relation("AuthorNews")
  events              Event[]              @relation("AuthorEvent")
  expenses            Expense[]            @relation("ExpenseRecorder")
  services            Service[]            @relation("ServiceUpdater")
  settings            Setting[]            @relation("SettingUpdater")
  notificationSetting NotificationSetting?
  notifications       Notification[]
  otpTokens           OtpToken[]

  @@index([email])
  @@index([type])
  @@index([status])
}

model CounterOtp {
  id      String @id @default(uuid()) @db.Uuid
  counter Int
}

model OtpToken {
  id      String   @id @default(uuid()) @db.Uuid
  code    String   @db.VarChar(255)
  userId  String
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  counter Int?
  expire  DateTime @db.Timestamp(6)
}

// Enum pour les types de services/demandes offerts par la mission diplomatique
enum ServiceType {
  VISA
  BIRTH_ACT_APPLICATION // Demande d'acte de naissance
  CONSULAR_CARD // Demande de carte consulaire
  LAISSEZ_PASSER // Demande de laissez-passer
  MARRIAGE_CAPACITY_ACT // Demande d'acte de capacité de mariage
  DEATH_ACT_APPLICATION // Demande d'acte de décès
  POWER_OF_ATTORNEY // Demande de procuration
  NATIONALITY_CERTIFICATE // Demande de certificat de nationalité
}

// Enum pour les statuts de la demande (Workflow générique)
enum RequestStatus {
  NEW // Nouvelle demande soumise
  IN_REVIEW_DOCS // En cours de vérification des documents (par l'agent)
  PENDING_ADDITIONAL_INFO // En attente d'informations ou de documents complémentaires du demandeur
  APPROVED_BY_AGENT // Approuvé par l'agent (prêt pour le chef de service)
  APPROVED_BY_CHEF // Approuvé par le chef de service (prêt pour le consul/délivrance)
  APPROVED_BY_CONSUL // Approuvé par le consul (décision finale d'approbation)
  REJECTED // Demande rejetée
  READY_FOR_PICKUP // Document prêt à être retiré
  DELIVERED // Document délivré
  ARCHIVED // Demande archivée (après délivrance ou rejet)
  EXPIRED // Pour les visas expirés ou autres services à durée limitée
  RENEWAL_REQUESTED // Demande de renouvellement soumise (si applicable)
}

model Request {
  id String @id @default(uuid())

  // Numéro de ticket unique pour le suivi par le demandeur
  ticketNumber String @unique

  // Lien vers l'utilisateur (demandeur) qui a soumis la demande
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Type de demande (Visa, Acte de Naissance, etc.) client
  serviceType ServiceType

  // Statut actuel de la demande
  status RequestStatus @default(NEW)

  // Date de soumission de la demande
  submissionDate DateTime @default(now())

  // Date de dernière mise à jour du statut
  updatedAt DateTime @updatedAt

  // Date de finalisation de la demande (approbation, rejet, délivrance)
  completionDate DateTime?

  // Date à laquelle le document résultant de la demande a été délivré
  issuedDate DateTime? // Optionnel, car une demande peut être rejetée sans délivrance

  // Numéro de téléphone de contact spécifique à cette demande
  contactPhoneNumber String? // Optionnel

  // Champ pour des observations internes par le personnel
  observations String? @db.Text

  // Coût de la demande au moment de la soumission (pour la traçabilité financière)
  amount Float

  // Relations 1-à-N
  documents     Document[]
  statusHistory RequestStatusHistory[]

  // Relations 1-à-1 vers les modèles de détails spécifiques (et leurs champs de liaison)
  visaDetails VisaRequestDetails?

  birthActDetails BirthActRequestDetails?

  consularCardDetails ConsularCardRequestDetails?

  laissezPasserDetails LaissezPasserRequestDetails?

  marriageCapacityActDetails MarriageCapacityActRequestDetails?

  deathActDetails DeathActRequestDetails?

  powerOfAttorneyDetails PowerOfAttorneyRequestDetails?

  nationalityCertificateDetails NationalityCertificateRequestDetails?

  // Relation 1-à-1 pour le paiement
  payment Payment?

  @@index([ticketNumber])
  @@index([status])
  @@index([serviceType])
  @@index([submissionDate])
  @@index([userId])
}

model Document {
  id String @id @default(uuid())

  fileName   String // Nom du fichier
  mimeType   String // Type MIME du fichier
  filePath   String // Chemin du fichier
  fileSizeKB Int // Taille en Kilobytes

  requestId String
  request   Request @relation(fields: [requestId], references: [id], onDelete: Cascade)

  // Qui a téléchargé/ajouté ce document (un demandeur ou un agent)
  uploaderId String
  uploader   User   @relation("UploaderDocuments", fields: [uploaderId], references: [id], onDelete: Restrict)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([requestId])
  @@index([uploaderId])
}

// Historique des changements de statut d'une demande
model RequestStatusHistory {
  id String @id @default(uuid())

  requestId String
  request   Request @relation(fields: [requestId], references: [id], onDelete: Cascade)

  oldStatus RequestStatus?
  newStatus RequestStatus

  // Qui a effectué le changement de statut
  changerId String
  changer   User   @relation("StatusChanger", fields: [changerId], references: [id], onDelete: Restrict)

  changedAt DateTime @default(now())
  reason    String?  @db.Text

  @@index([requestId])
  @@index([changerId])
  @@index([changedAt])
}

// Enum pour les méthodes de paiement
enum PaymentMethod {
  CASH
  MOBILE_MONEY
  BANK_TRANSFER
  CREDIT_CARD
  OTHER
}

// Model pour les paiements effectués pour les demandes
model Payment {
  id String @id @default(uuid())

  // Liaison 1-à-1 avec la Request (chaque paiement est pour une Request unique pour simplifier)
  requestId String  @unique
  request   Request @relation(fields: [requestId], references: [id], onDelete: Cascade)

  amount         Float
  paymentDate    DateTime      @default(now())
  method         PaymentMethod
  transactionRef String?       @unique

  // Qui a enregistré ce paiement
  recordedById String
  recordedBy   User   @relation("PaymentRecorder", fields: [recordedById], references: [id], onDelete: Restrict)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([paymentDate])
  @@index([method])
  @@index([recordedById])
}

// Enum pour le type de passeport
enum PassportType {
  ORDINARY // ordinaire
  SERVICE
  DIPLOMATIC
}

// Enum pour le type de visa
enum VisaType {
  SHORT_STAY
  LONG_STAY
}

// Enum pour le genre
enum Gender {
  MALE
  FEMALE
}

// Enum pour la situation familiale
enum MaritalStatus {
  SINGLE // celibataire
  MARRIED
  DIVORCED
  WIDOWED // veuf/ veuve
}

model VisaRequestDetails {
  id String @id @default(uuid())

  requestId String  @unique
  request   Request @relation(fields: [requestId], references: [id], onDelete: Cascade)

  personFirstName     String
  personLastName      String
  personGender        Gender
  personNationality   String
  personBirthDate     DateTime
  personBirthPlace    String
  personMaritalStatus MaritalStatus

  passportType           PassportType // Type de passeport
  passportNumber         String // Numéro du passeport
  passportIssuedBy       String // Nom de l'ambassade qui a émis le passeport
  passportIssueDate      DateTime // Date d'émission du passeport
  passportExpirationDate DateTime // Date d'expiration du passeport

  profession          String? // Profession du demandeur
  employerAddress     String? // Adresse de l'employeur
  employerPhoneNumber String? // Numéro de téléphone de l'employeur

  visaType         VisaType // Type de visa
  durationMonths   Int // Durée du visa en mois
  destinationState String? // État de destination

  visaExpirationDate DateTime? // Date d'expiration du visa délivré

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([passportNumber])
  @@index([personNationality])
}

enum BirthActRequestType {
  NEWBORN // nouveau-né
  RENEWAL // renouvellé
}

model BirthActRequestDetails {
  id String @id @default(uuid())

  requestId String  @unique
  request   Request @relation(fields: [requestId], references: [id], onDelete: Cascade)

  personFirstName   String
  personLastName    String
  personBirthDate   DateTime
  personBirthPlace  String
  personNationality String
  personDomicile    String?

  fatherFullName String
  motherFullName String

  requestType BirthActRequestType

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([personFirstName, personLastName])
  @@index([personBirthDate])
}

enum JustificationDocumentType {
  PASSPORT
  NATIONAL_ID_CARD // CNI
}

model ConsularCardRequestDetails {
  id String @id @default(uuid())

  requestId String  @unique
  request   Request @relation(fields: [requestId], references: [id], onDelete: Cascade)

  personFirstName              String
  personLastName               String
  personBirthDate              DateTime
  personBirthPlace             String
  personProfession             String?
  personNationality            String // Nationalité de la personne concernée par la carte
  personDomicile               String?
  personAddressInOriginCountry String? // Renommé pour être générique

  fatherFullName String?
  motherFullName String?

  justificationDocumentType   JustificationDocumentType?
  justificationDocumentNumber String?

  cardExpirationDate DateTime? // Date d'expiration de la carte consulaire délivrée

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([personFirstName, personLastName])
  @@index([personNationality])
}

enum AccompanyingDocumentType {
  OLD_PASSPORT
  CONSULAR_CARD
  OTHER
}

model LaissezPasserRequestDetails {
  id String @id @default(uuid())

  requestId String  @unique
  request   Request @relation(fields: [requestId], references: [id], onDelete: Cascade)

  personFirstName   String
  personLastName    String
  personBirthDate   DateTime
  personBirthPlace  String
  personProfession  String?
  personNationality String
  personDomicile    String?

  fatherFullName String?
  motherFullName String?

  destination  String?
  travelReason String? @db.Text // la raison du voyage

  accompanied  Boolean       @default(false)
  accompaniers Accompanier[] // Correction : relation 1-à-plusieurs vers Accompanier

  justificationDocumentType   JustificationDocumentType?
  justificationDocumentNumber String?

  laissezPasserExpirationDate DateTime? // Date de validité du Laissez-Passer délivré

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([personFirstName, personLastName])
  @@index([personNationality])
}

// Renommé de Accompaniers à Accompanier pour respecter les conventions
model Accompanier {
  id String @id @default(uuid())

  // Liaison vers la demande de laissez-passer (non unique pour 1-à-N)
  laissezPasserRequestDetailsId String
  laissezPasserRequestDetails   LaissezPasserRequestDetails @relation(fields: [laissezPasserRequestDetailsId], references: [id], onDelete: Cascade)

  firstName   String // Nom de l'accompagnant
  lastName    String // Prénom de l'accompagnant
  birthDate   DateTime // Date de naissance de l'accompagnant
  birthPlace  String // Lieu de naissance de l'accompagnant
  nationality String // Nationalité de l'accompagnant
  domicile    String? // Lieu de résidence de l'accompagnant

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([laissezPasserRequestDetailsId])
}

model MarriageCapacityActRequestDetails {
  id String @id @default(uuid())

  requestId String  @unique
  request   Request @relation(fields: [requestId], references: [id], onDelete: Cascade)

  husbandFirstName   String
  husbandLastName    String
  husbandBirthDate   DateTime
  husbandBirthPlace  String
  husbandNationality String
  husbandDomicile    String?

  wifeFirstName   String
  wifeLastName    String
  wifeBirthDate   DateTime
  wifeBirthPlace  String
  wifeNationality String
  wifeDomicile    String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([husbandFirstName, husbandLastName])
  @@index([wifeFirstName, wifeLastName])
}

model DeathActRequestDetails {
  id String @id @default(uuid())

  requestId String  @unique
  request   Request @relation(fields: [requestId], references: [id], onDelete: Cascade)

  deceasedFirstName   String
  deceasedLastName    String
  deceasedBirthDate   DateTime
  deceasedDeathDate   DateTime
  deceasedNationality String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([deceasedFirstName, deceasedLastName])
  @@index([deceasedDeathDate])
}

model PowerOfAttorneyRequestDetails {
  id String @id @default(uuid())

  requestId String  @unique
  request   Request @relation(fields: [requestId], references: [id], onDelete: Cascade)

  agentFirstName                 String
  agentLastName                  String
  agentJustificationDocumentType JustificationDocumentType? @default(NATIONAL_ID_CARD)
  agentIdDocumentNumber          String?
  agentAddress                   String?

  principalFirstName                 String
  principalLastName                  String
  principalJustificationDocumentType JustificationDocumentType? @default(NATIONAL_ID_CARD)
  principalIdDocumentNumber          String?
  principalAddress                   String?

  powerOfType String? // Nous laissons String? pour l'instant comme discuté.
  reason      String? @db.Text // raison

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([agentFirstName, agentLastName])
  @@index([principalFirstName, principalLastName])
}

// Enum pour le lien de parenté avec le parent du pays d'origine (Tchad)
enum OriginCountryParentRelationshipType {
  FATHER
  MOTHER
}

model NationalityCertificateRequestDetails {
  id String @id @default(uuid())

  requestId String  @unique
  request   Request @relation(fields: [requestId], references: [id], onDelete: Cascade)

  applicantFirstName   String
  applicantLastName    String
  applicantBirthDate   DateTime
  applicantBirthPlace  String
  applicantNationality String // Nationalité déclarée par le demandeur

  originCountryParentFirstName    String // Renommé
  originCountryParentLastName     String // Renommé
  originCountryParentRelationship OriginCountryParentRelationshipType // Renommé et utilise l'Enum

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([applicantFirstName, applicantLastName])
  @@index([applicantNationality])
}

// Modèles pour le CMS

// Actualités
model News {
  id        String   @id @default(uuid())
  title     String
  content   String   @db.Text
  imageUrls String[]
  published Boolean  @default(false)
  authorId  String
  author    User     @relation("AuthorNews", fields: [authorId], references: [id], onDelete: Restrict)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([published])
  @@index([authorId])
  @@index([createdAt])
}

// Evénements
model Event {
  id          String   @id @default(uuid())
  title       String
  description String   @db.Text
  eventDate   DateTime
  location    String?
  imageUrl    String[]
  published   Boolean  @default(false)
  authorId    String
  author      User     @relation("AuthorEvent", fields: [authorId], references: [id], onDelete: Restrict)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([published])
  @@index([eventDate])
  @@index([authorId])
}

// Photos
model Photo {
  id          String   @id @default(uuid())
  title       String?
  description String?
  imageUrl    String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([createdAt])
}

// Vidoes
model Video {
  id          String   @id @default(uuid())
  title       String?
  description String?
  youtubeUrl  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([createdAt])
}

// Catégorie des dépenses
enum ExpenseCategory {
  SALARIES // Salaires
  GENERAL_OVERHEAD // Moyens Généraux (Moyens Gén)
  RENT // Loyers
  INTERNET_COMM // Canal et Internet
  UTILITIES // CIE et SODECI (Charges)
  OTHER // Autre
}

// Dépenses
model Expense {
  id String @id @default(uuid())

  amount      Float // Montant de la dépense
  description String? // Description de la dépense (Description)
  category    ExpenseCategory // Catégorie de la dépense

  // Qui a exécuté/enregistré cette dépense (Exécuté par)
  recordedById String
  recordedBy   User   @relation("ExpenseRecorder", fields: [recordedById], references: [id], onDelete: Restrict)

  expenseDate DateTime // Date de la dépense (Date)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([category])
  @@index([expenseDate])
  @@index([recordedById])
}

// Services
model Service {
  id String @id @default(uuid())

  type ServiceType @unique

  name        String // Nom affiché du service (ex: "Demande de Visa", "Acte de Naissance")
  description String? @db.Text // Description publique du service

  defaultPrice Float

  // Indique si le prix de ce service peut varier en fonction de sous-options (comme pour le visa)
  isPriceVariable Boolean @default(false)

  // Qui a mis à jour ce service pour la dernière fois
  updatedById String?
  updatedBy   User?   @relation("ServiceUpdater", fields: [updatedById], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([type])
}

// Paramètres
model Setting {
  id          String  @id @default(uuid())
  key         String  @unique // Nom unique du paramètre (ex: "office_opening_hours", "support_email")
  value       String // Valeur du paramètre (ex: "09:00 - 17:00", "support@ambassade.com")
  description String? // Description pour aider à comprendre le paramètre

  // Qui a mis à jour ce paramètre pour la dernière fois
  updatedById String?
  updatedBy   User?   @relation("SettingUpdater", fields: [updatedById], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([key])
}

// Type de notification (catégorie)
enum NotificationType {
  SYSTEM // Notifications générées par le système (ex: compte activé, statut de demande)
  PROMOTION // Notifications marketing/promotionnelles
  REQUEST_UPDATE // Mises à jour du statut des demandes consulaires
  ACCOUNT_UPDATE // Mises à jour du compte utilisateur (ex: mot de passe changé)
}

// Cible de la notification (qui doit la recevoir)
enum NotificationTarget {
  INDIVIDUAL // Pour un utilisateur spécifique
  ALL_CLIENTS // Pour tous les utilisateurs de type DEMANDEUR
  ALL_PERSONNEL // Pour tous les utilisateurs de type PERSONNEL
  ROLE_ADMIN // Pour tous les utilisateurs ayant le rôle ADMIN
  ROLE_AGENT // Pour tous les utilisateurs ayant le rôle AGENT
  ROLE_CHEF_SERVICE // Pour tous les utilisateurs ayant le rôle CHEF_SERVICE
  ROLE_CONSUL // Pour tous les utilisateurs ayant le rôle CONSUL
}

model NotificationSetting {
  id     String @id @default(uuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  requestUpdate Boolean @default(true)
  promotions    Boolean @default(true)
  system        Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Notification
model Notification {
  id String @id @default(uuid())

  title   String
  message String           @db.Text
  type    NotificationType
  isRead  Boolean          @default(false)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  target NotificationTarget

  icon        String
  iconBgColor String
  showChevron Boolean @default(false)

  data Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId, isRead])
  @@index([type, isRead])
  @@index([createdAt])
}
