import { notificationIcons } from "src/notifications/constantes/notifications.constante";
import { NotificationTemplate } from "src/notifications/interfaces/notifications.interface";
import { User, UserType, Role, UserStatus } from "@prisma/client";
import { userGetRole } from "../constantes/user-get-role.constante";

export class UserNotificationsTemplate {

    /**
     * NOTIFICATION 1: NOUVEL UTILISATEUR CR√â√â (Pour les Administrateurs/Personnel de gestion)
     * D√©clencheur: `UsersService.create` ou `AuthService.registerClient`.
     * Contexte: Un nouvel utilisateur (demandeur ou membre du personnel) a √©t√© ajout√© au syst√®me.
     */
    NEW_USER_CREATED_FOR_ADMIN: NotificationTemplate<{
        user: User; // Le nouvel utilisateur cr√©√©
        actor?: User; // L'administrateur ou membre du personnel qui a cr√©√© le compte (si applicable)
    }> = {
            title: (ctx) => `üë• Nouvel Enregistrement Utilisateur`,
            message: (ctx) => {
                const userRoleLabel = ctx.data.user.type === UserType.DEMANDEUR
                    ? 'Demandeur de Services'
                    : userGetRole(ctx.data.user.role as Role);

                const createdBy = ctx.data.actor
                    ? `par ${ctx.data.actor.firstName ?? ''} ${ctx.data.actor.lastName ?? ''}`.trim()
                    : 'via auto-enregistrement';

                return `Un nouveau compte a √©t√© cr√©√© pour ${ctx.data.user.firstName ?? ''} ${ctx.data.user.lastName ?? ''} (${ctx.data.user.email}) en tant que **${userRoleLabel}** ${createdBy}.`;
            },
            icon: (ctx) => notificationIcons.joice.url,
            iconBgColor: (ctx) => notificationIcons.joice.color,
            showChevron: false,
        };

    /**
     * NOTIFICATION 2: BIENVENUE √Ä L'UTILISATEUR (Pour le nouvel utilisateur lui-m√™me)
     * D√©clencheur: `UsersService.create` ou `AuthService.registerClient`.
     * Contexte: Le compte de l'utilisateur a √©t√© cr√©√© et est pr√™t.
     */
    WELCOME_USER: NotificationTemplate<{
        user: User; // Le nouvel utilisateur
        temporaryPasswordSet?: boolean; // Indique si un mot de passe temporaire a √©t√© d√©fini
    }> = {
            title: (ctx) => `üéâ Bienvenue sur la plateforme !`,
            message: (ctx) => {
                if (ctx.data.user.type === UserType.PERSONNEL && ctx.data.temporaryPasswordSet) {
                    return `Votre compte est pr√™t. Veuillez vous connecter et changer votre mot de passe initial.`;
                }
                return `Votre compte est d√©sormais actif. Connectez-vous pour acc√©der √† nos services.`;
            },
            icon: (ctx) => notificationIcons.joice.url,
            iconBgColor: (ctx) => notificationIcons.joice.color,
            showChevron: false,
        };

    /**
     * NOTIFICATION 3: MOT DE PASSE TEMPORAIRE D√âFINI (Pour l'utilisateur personnel)
     * D√©clencheur: `UsersService.create` (lors de la cr√©ation d'un personnel par un admin).
     * Contexte: Un compte personnel a √©t√© cr√©√© avec un mot de passe temporaire.
     */
    TEMPORARY_PASSWORD_SET: NotificationTemplate<{
        user: User; // L'utilisateur personnel concern√©
    }> = {
            title: (ctx) => `üîë Mot de passe initial d√©fini`,
            message: (ctx) => `Votre compte personnel a √©t√© cr√©√©. Pour des raisons de s√©curit√©, veuillez modifier votre mot de passe lors de votre premi√®re connexion.`,
            icon: (ctx) => notificationIcons.setting.url,
            iconBgColor: (ctx) => notificationIcons.setting.color,
            showChevron: false,
        };

    /**
     * NOTIFICATION 4: MOT DE PASSE CHANG√â AVEC SUCC√àS (Pour l'utilisateur concern√©)
     * D√©clencheur: `AuthService.resetPassword` ou le premier changement de mot de passe du personnel.
     * Contexte: L'utilisateur a modifi√© son mot de passe.
     */
    PASSWORD_CHANGED_SUCCESS: NotificationTemplate<{
        user: User; // L'utilisateur dont le mot de passe a √©t√© chang√©
    }> = {
            title: (ctx) => `‚úÖ Mot de passe modifi√©`,
            message: (ctx) => `Votre mot de passe a √©t√© modifi√© avec succ√®s. Si vous n'√™tes pas √† l'origine de cette action, veuillez nous contacter.`,
            icon: (ctx) => notificationIcons.ok.url,
            iconBgColor: (ctx) => notificationIcons.ok.color,
            showChevron: false,
        };

    /**
     * NOTIFICATION 5: COMPTE ACTIF / INACTIF (Pour l'utilisateur concern√©)
     * D√©clencheur: `UsersService.activate` ou `UsersService.deactivate`.
     * Contexte: Le statut d'activation du compte d'un utilisateur a √©t√© modifi√©.
     */
    ACCOUNT_STATUS_UPDATED: NotificationTemplate<{
        user: User; // L'utilisateur dont le statut a √©t√© modifi√©
        newStatus: UserStatus; // Le nouveau statut du compte
        actor?: User; // L'administrateur ayant effectu√© la modification
    }> = {
            title: (ctx) => ctx.data.newStatus === UserStatus.ACTIVE ? `Compte Activ√©` : `Compte D√©sactiv√©`,
            message: (ctx) => {
                const actionBy = ctx.data.actor
                    ? `par ${ctx.data.actor.firstName ?? ''} ${ctx.data.actor.lastName ?? ''}`.trim()
                    : '';
                return ctx.data.newStatus === UserStatus.ACTIVE
                    ? `Votre compte ${ctx.data.user.email} est d√©sormais actif ${actionBy}. Vous pouvez vous connecter.`
                    : `Votre compte ${ctx.data.user.email} a √©t√© d√©sactiv√© ${actionBy}. Contactez l'administration pour plus d'informations.`;
            },
            icon: (ctx) => ctx.data.newStatus === UserStatus.ACTIVE ? notificationIcons.ok.url : notificationIcons.setting.url,
            iconBgColor: (ctx) => ctx.data.newStatus === UserStatus.ACTIVE ? notificationIcons.ok.color : notificationIcons.setting.color,
            showChevron: false,
        };

    /**
     * NOTIFICATION 6: MISE √Ä JOUR DU PROFIL (Pour l'utilisateur concern√©)
     * D√©clencheur: `UsersService.update` (lorsque l'utilisateur modifie son propre profil ou un admin le modifie).
     * Contexte: Certaines informations du profil utilisateur ont √©t√© modifi√©es.
     */
    PROFILE_UPDATED: NotificationTemplate<{
        user: User; // L'utilisateur dont le profil a √©t√© mis √† jour
        actor?: User; // L'utilisateur (ou l'administrateur) qui a effectu√© la mise √† jour
    }> = {
            title: (ctx) => `‚öôÔ∏è Profil mis √† jour`,
            message: (ctx) => {
                const updatedBy = ctx.data.actor && ctx.data.actor.id !== ctx.data.user.id
                    ? ` par ${ctx.data.actor.firstName ?? ''} ${ctx.data.actor.lastName ?? ''}`.trim()
                    : '';
                return `Votre profil a √©t√© mis √† jour avec succ√®s${updatedBy}. V√©rifiez les informations.`;
            },
            icon: (ctx) => notificationIcons.setting.url,
            iconBgColor: (ctx) => notificationIcons.setting.color,
            showChevron: true,
        };

    /**
     * NOTIFICATION 7: COMPTE VERROUILL√â (Pour l'utilisateur concern√©)
     * D√©clencheur: Logique de s√©curit√© apr√®s des tentatives de connexion √©chou√©es (souvent dans AuthService ou un middleware).
     * Contexte: Le compte de l'utilisateur a √©t√© temporairement verrouill√©.
     */
    ACCOUNT_LOCKED: NotificationTemplate<{
        user: User; // L'utilisateur dont le compte est verrouill√©
    }> = {
            title: (ctx) => `üîí Compte Temporairement Verrouill√©`,
            message: (ctx) => `Votre compte a √©t√© verrouill√© suite √† des tentatives de connexion infructueuses. Veuillez r√©essayer plus tard ou r√©initialiser votre mot de passe.`,
            icon: (ctx) => notificationIcons.setting.url,
            iconBgColor: (ctx) => notificationIcons.setting.color,
            showChevron: false,
        };

    /**
     * NOTIFICATION 8: R√îLE DU PERSONNEL MIS √Ä JOUR (Pour le membre du personnel concern√©)
     * D√©clencheur: `UsersService.update` (lorsqu'un admin modifie le r√¥le d'un membre du personnel).
     * Contexte: Le r√¥le d'un membre du personnel a √©t√© modifi√©.
     */
    PERSONNEL_ROLE_UPDATED: NotificationTemplate<{
        user: User; // Le membre du personnel dont le r√¥le a √©t√© mis √† jour
        oldRole: Role | null; // L'ancien r√¥le
        newRole: Role; // Le nouveau r√¥le
        actor?: User; // L'administrateur ayant effectu√© l'action
    }> = {
            title: (ctx) => `Mise √† Jour de Votre R√¥le`,
            message: (ctx) => {
                const oldRoleLabel = userGetRole(ctx.data.oldRole as Role);
                const newRoleLabel = userGetRole(ctx.data.newRole);
                const actionBy = ctx.data.actor
                    ? `par ${ctx.data.actor.firstName ?? ''} ${ctx.data.actor.lastName ?? ''}.`
                    : '.';
                return `Votre r√¥le a √©t√© modifi√© de **${oldRoleLabel}** √† **${newRoleLabel}** ${actionBy} Vos acc√®s ont √©t√© ajust√©s.`;
            },
            icon: (ctx) => notificationIcons.setting.url,
            iconBgColor: (ctx) => notificationIcons.setting.color,
            showChevron: true,
        };
}